

// Array para armazenar os IPs autenticados

let ipsAutenticados = [];

// Função para verificar se um IP está autenticado
function ipEstaAutenticado(ip) {
    return ipsAutenticados.includes(ip);
}

// Função para adicionar um IP à lista de IPs autenticados
function adicionarIPAutenticado(ip) {
    ipsAutenticados.push(ip);
}

// Função para carregar IPs de um arquivo RAW no GitHub
async function carregarIPsDoGitHub() {
    const urlIPs = 'https://raw.githubusercontent.com/ggmaxez/ggmax/main/keys';

    try {
        const resposta = await fetch(urlIPs);
        const textoIPs = await resposta.text();
        return textoIPs.split('\n').map(ip => ip.trim());
    } catch (erro) {
        console.error('Erro ao carregar IPs do GitHub:', erro);
        return [];
    }
}



// Função para obter o endereço IP do usuário
async function obterEnderecoIP() {
    try {
        const resposta = await fetch('https://api.ipify.org?format=json');
        const dados = await resposta.json();
        return dados.ip;
    } catch (erro) {
        console.error('Erro ao obter o endereço IP:', erro);
        return null;
    }
}

// Função para enviar o endereço IP para o webhook do Discord
async function enviarIPParaWebhook(enderecoIP) {
    const webhookURL = 'https://discord.com/api/webhooks/1165317286199054510/VoFBkBq5JAmvueVos13RkfOB4lDqgCuRySy_URgEz--ABWffDY-1f0ptRtkrPGYZxFOt'; // Substitua pelo URL do seu webhook

    try {
        const resposta = await fetch(webhookURL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                content: `Novo endereço IP: ${enderecoIP}`,
            }),
        });

        if (resposta.ok) {
            console.log('Endereço IP enviado com sucesso para o webhook do Discord.');
        } else {
            console.error('Falha ao enviar o endereço IP para o webhook do Discord.');
        }
    } catch (erro) {
        console.error('Erro ao enviar o endereço IP para o webhook do Discord:', erro);
    }
}

// Função principal
async function main() {
    // Carrega os IPs do GitHub
    ipsAutenticados = await carregarIPsDoGitHub();

    // Obtém o endereço IP do usuário
    const enderecoIP = await obterEnderecoIP();

    // Verifica se o IP está autenticado
    if (enderecoIP && ipEstaAutenticado(enderecoIP)) {
        // Se o IP está autenticado, execute o restante do script
        console.log('IP autenticado. Executando o restante do script.');

        // Envie o endereço IP para o webhook do Discord
        await enviarIPParaWebhook(enderecoIP);

       const respostasRapidas = 
    "Olá! foi entregue lá encima.",
    "Olá! Estamos verificando sua solicitação.",
    "Feche na intervenção na direita do chat em cancelar solicitação",
    "Como posso ajudar você amigo?",
    "https://ggmax.com.br/termos-de-uso",
];

// Função para adicionar respostas rápidas ao chat
function adicionarRespostaRapida(resposta) {
    // Encontre o campo de entrada do chat (ajuste o seletor conforme necessário)
    const chatInput = document.querySelector('textarea[data-v-11b88eb0][placeholder="Digite sua mensagem..."]');

    if (chatInput) {
        // Insira a resposta rápida no campo de entrada
        chatInput.value = resposta;

        // Dispare um evento 'input' para simular a entrada de texto
        const inputEvent = new Event('input', {
            bubbles: true,
            cancelable: true,
        });
        chatInput.dispatchEvent(inputEvent);

        // Espere um curto período de tempo antes de enviar a mensagem (ajuste conforme necessário)
        setTimeout(() => {
            // Encontre o botão de envio (ajuste o seletor conforme necessário)
            const sendButton = document.querySelector('span.input-group-text.send-button');

            if (sendButton) {
                // Clique no botão de envio
                sendButton.click();
            }
        }, 1000); // Espere 1 segundo antes de enviar a mensagem (ajuste conforme necessário)
    }
}

// Cria o botão "Respostas Rápidas" com posição fixa
const respostaRapidaButton = document.createElement('button');
respostaRapidaButton.textContent = 'RESPOSTAS';
respostaRapidaButton.style.cssText = `
    position: fixed;
    bottom: 10px;
    left: 225px;
    padding: 10px;
    font-size: 16px;
    font-weight: bold;
    background: #007bff;
    color: white;
    box-shadow: 0 7px 7px rgba(0, 0, 0, 0.3);
    border: none;
    border-radius: 4px;
    cursor: pointer;
    z-index: 9999;
`;

// Função para criar o quadro de respostas rápidas
function criarQuadroRespostasRapidas() {
    // Cria o container do quadro de respostas
    const quadroRespostas = document.createElement('div');
    quadroRespostas.style.cssText = `
        position: fixed;
        top: 970px;
        left: 225px;
        background-color: #333;
        color: white;
        text-align: left;
        padding: 15px;
        border-radius: 10px;
        box-shadow: 0 8px 8px rgba(0, 0, 0, 0.9);
        font-family: sans-serif;
        font-size: 14px;
        line-height: 1.0;
        max-width: 300px;
        z-index: 9998;
        display: none;
    `;

    // Cria botões para cada resposta rápida
    respostasRapidas.forEach((resposta) => {
        const respostaButton = document.createElement('button');
        respostaButton.textContent = resposta;
        respostaButton.style.cssText = `
            display: block;
            width: 100%;
            background: #007bff;
            border: none;
            padding: 12px;
            cursor: pointer;
            color: #fff;
            box-shadow: 0 8px 8px rgba(0, 0, 0, 0.9);
            text-align: left;
            font-size: 16px;
            transition: background-color 0.5s;
        `;

        respostaButton.addEventListener('mouseover', () => {
            respostaButton.style.backgroundColor = '#025bba';
        });

        respostaButton.addEventListener('mouseout', () => {
            respostaButton.style.backgroundColor = '#007bff';
        });

        respostaButton.addEventListener('click', () => {
            // Ao clicar em uma resposta rápida, adiciona a resposta ao chat e envia
            adicionarRespostaRapida(resposta);
            quadroRespostas.style.display = 'none';
        });

        quadroRespostas.appendChild(respostaButton);
    });

    // Fecha o quadro de respostas ao clicar em outro local da página
    window.addEventListener('click', (event) => {
        if (!quadroRespostas.contains(event.target) && event.target !== respostaRapidaButton) {
            quadroRespostas.style.display = 'none';
        }
    });

    // Adiciona o quadro de respostas ao corpo da página
    document.body.appendChild(quadroRespostas);
    return quadroRespostas;
}

// Função para alternar a exibição do quadro de respostas rápidas
let quadroRespostasVisivel = false;
respostaRapidaButton.addEventListener('click', () => {
    if (quadroRespostasVisivel) {
        quadroRespostas.style.display = 'none';
    } else {
        quadroRespostas.style.display = 'block';
    }
    quadroRespostasVisivel = !quadroRespostasVisivel;
});

// Adicione o botão "Respostas Rápidas" à página
document.body.appendChild(respostaRapidaButton);

// Cria o quadro de respostas rápidas
const quadroRespostas = criarQuadroRespostasRapidas();

(function () {
    'use strict';
    // DEFINA AQUI A MENSAGEM QUE SERÁ ENVIADA NO BATE-PAPO
    var mensagemchat = " ";
    // DEFINA AQUI A MENSAGEM QUE SERÁ COLOCADA NA AVALIAÇÃO
    var mensagemavaliacao = " ";
    // CASO VOCÊ PERCEBA QUE A PAGINA ESTÁ DEMORANDO PARA ABRIR A LISTA DE PRODUTOS ENTREGUE, AUMENTE ESSE VALOR
    var delayentregues = 1000
    // CASO VOCÊ PERCEBA QUE A PAGINA ESTÁ DEMORANDO PARA ABRIR A LISTA DE AVALIAÇÕES DE PENDENTES, AUMENTE ESSE VALOR
    var delaypendentes = 1000
    // CASO VOCÊ PERCEBA QUE A PAGINA DA VENDA ESTÁ DEMORANDO PARA CARREGAR, AUMENTE ESSE VALOR
    var delaychat = 1000
    // TEMPO PARA VERIFICAR SE HOUVE UMA NOVA VENDA
    var verificadordevenda = 60000

    const popup = document.createElement('div');
    popup.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #fff;
        color: #333;
        text-align: center;
        padding: 22px;
        border-radius: 10px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        font-family: sans-serif;
        font-size: 16px;
        line-height: 1.4;
        max-width: 80%;
    `;

    const popupText = document.createElement('h1');
    popupText.innerHTML = 'Estoque automático';
    popupText.style.cssText = `
        margin-bottom: 0px;
        font-size: 30px;
        color: black;
    `;

    let isTableOpen = false; // Variável para rastrear o estado da tabela

    // Cria a tabela de funções novas
    const functionTable = document.createElement('div');
    functionTable.innerHTML = `
    <div>
        <button id="addStockButton" style="background-color: #007bff; color: white; padding: 10px 20px;">Adicionar Estoque</button>
    </div>
    <div style="margin-top: 10px;"> <!-- Adiciona um espaço de 10 pixels entre os botões -->
        <button id="loadSalesButton" style="background-color: #007bff; color: white; padding: 10px 20px;">Carregar Vendas</button>
    </div>
    <div style="margin-top: 10px;"> <!-- Adiciona um espaço de 10 pixels entre os botões -->
        <button id="loadAutoAvaliacao" style="background-color: #007bff; color: white; padding: 10px 20px;">Ativar AutoAvaliação</button>
    </div>
`;

    // Estiliza a tabela
    functionTable.style.cssText = `
    position: fixed;
    bottom: -100%; /* Inicialmente esconde a tabela fora da tela */
    left: 0;
    background: #343a40; /* Cor de fundo */
    color: #333;
    padding: 10px;
    border-radius: 10px; /* Borda arredondada */
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    max-height: 50vh;
    overflow: auto;
    transition: bottom 0.3s; /* Adiciona uma transição suave de animação */
    z-index: 9998;

`;

    // Localiza a div com a classe step__footer
    const divToDelete = document.querySelector('div.step__footer[data-v-2182cc71]');

    if (divToDelete) {
        // Remove a div
        divToDelete.parentNode.removeChild(divToDelete);
    }

    // Altera o texto no elemento h5 com a classe header__title
    const headerTitle = document.querySelector('h5.header__title[data-v-2182cc71]');
    if (headerTitle) {
        headerTitle.textContent = 'ARCHWEZ';
    }

    // Altera o conteúdo do elemento p com os dados desejados
    const paragraph = document.querySelector('p[data-v-2182cc71] strong[data-v-2182cc71]');
    if (paragraph) {
        paragraph.textContent = 'ATENÇÃO:';
        paragraph.nextSibling.textContent = ' PARA ATUALIZAÇÕES SEMPRE ESTEJA EM https://discord.gg/pWneCaNnst';
    }

    // Localize o elemento com base na classe
    const element = document.querySelector('h5.text-success[data-v-2182cc71]');

    if (element) {
        // Atualize o conteúdo do elemento
        element.textContent = 'V1.0';
    }


    // Adicione o ID "addStockButton" ao botão no HTML da tabela
    // <button id="addStockButton">Adicionar Estoque</button>
    // <button id="loadSalesButton">Carregar vendas</button>
    // <button id="automaticavaliation">Avaliação automatica</button>

    // Adiciona a tabela à página
    document.body.appendChild(functionTable);

    // Função para alternar o clique automático
    let isAutoClicking = false; // Variável para rastrear o estado do clique automático
    let autoClickInterval;



    let isAutoAvaliacao = false; // Variável para rastrear o estado do clique automático

    // Função para clicar na div "Avaliação"
    function clickAvaliacao() {


        var buttons = document.querySelectorAll('span.button__label');

        for (var i = 0; i < buttons.length; i++) {
            if (buttons[i].textContent === 'Pedido' && buttons[i].style.display === 'none' && isAutoAvaliacao) {
                buttons[i].parentNode.click();
                break; // Para após o primeiro clique encontrado.
            }
        }

        // Após 1 segundo, clique no elemento com a classe "option__label" e o texto "Entregues"
        setTimeout(function () {
            var optionLabels = document.querySelectorAll('span.option__label');

            for (var j = 0; j < optionLabels.length; j++) {
                if (optionLabels[j].textContent === 'Entregues' && isAutoAvaliacao) {
                    optionLabels[j].click();
                    break;
                }
            }

            var buttons = document.querySelectorAll('span.button__label');

            for (var k = 0; k < buttons.length; k++) {
                if (buttons[k].textContent === 'Avaliação' && buttons[k].style.display === 'none' && isAutoAvaliacao) {
                    buttons[k].parentNode.click();
                    break; // Para após o primeiro clique encontrado.
                }
            }

            // Após 1 segundo, clique no elemento com a classe "option__label" e o texto "Pendentes"
            setTimeout(function () {
                var optionLabels = document.querySelectorAll('span.option__label');

                for (var f = 0; f < optionLabels.length; f++) {
                    if (optionLabels[f].textContent === 'Pendentes' && isAutoAvaliacao) {
                        optionLabels[f].click();
                        break;
                    }
                }

                // VER PEDIDO
                // Após mais 1 segundo, clique no elemento com o seletor especificado
                setTimeout(function () {
                    // Localize o elemento usando o seletor CSS
                    var elementToClick = document.querySelector('#__layout > div > div:nth-of-type(3) > div:nth-of-type(3) > div > div > div > div > div > div > div:nth-of-type(2) > div > div > div:nth-of-type(2) > a');

                    // Verifique se o elemento foi encontrado
                    if (isAutoAvaliacao) {
                        if (elementToClick) {
                            // Clique no elemento
                            elementToClick.click();
                        } else {
                            console.log('Elemento não encontrado');

                            for (var i = 0; i < optionLabels.length; i++) {
                                if (optionLabels[i].textContent === 'Todos') {
                                    optionLabels[i].click();
                                    break;
                                }
                            }
                            setTimeout(clickAvaliacao, verificadordevenda); // Volta ao inicio do script
                            return;
                        }
                    } else {
                        console.log('AutoAvaliação desativada.')
                        return;
                    }

                    // Após mais 1 segundo, clique na área de texto
                    setTimeout(function () {
                        var textArea = document.querySelector('textarea[data-v-11b88eb0][placeholder="Digite sua mensagem..."].form-control.type_msg.resize-vertical');

                        if (textArea && isAutoAvaliacao) {
                            // Clique na área de texto
                            textArea.click();

                            // Insira o texto especificado
                            textArea.value = mensagemchat;

                            // Dispare um evento de 'input' para simular a entrada de texto
                            var inputEvent = new Event('input', {
                                bubbles: true,
                                cancelable: true,
                            });
                            textArea.dispatchEvent(inputEvent);
                        } else {
                            console.log('Área de texto não encontrada ou a AutoAvaliação foi desativada');
                        }

                        // Após mais 1 segundo, clique no botão de enviar
                        setTimeout(function () {
                            var sendButton = document.querySelector('span.input-group-text.send-button');

                            if (sendButton && isAutoAvaliacao) {
                                // Clique no botão de enviar
                                sendButton.click();
                            } else {
                                console.log('Botão de enviar não encontrado ou a AutoAvaliação foi desativada');
                            }
                            // Após mais 1 segundo, clique no elemento com o seletor especificado
                            setTimeout(function () {
                                var finalElementToClick = document.querySelector('#__layout > div > div:nth-of-type(3) > div:nth-of-type(5) > div:nth-of-type(2) > div > div > div:nth-of-type(2) > div > div > div > div > div:nth-of-type(2) > div > a > i');

                                // Verifique se o elemento foi encontrado
                                if (finalElementToClick && isAutoAvaliacao) {
                                    // Clique no elemento
                                    finalElementToClick.click();
                                } else {
                                    console.log('Elemento final não encontrado ou a AutoAvaliação foi desativada');
                                }

                                // Após mais 1 segundo, clique na área de texto
                                setTimeout(function () {
                                    var textArea2 = document.querySelector('textarea[data-v-fb07956e][placeholder="Digite sua opinião aqui."].input-field');

                                    if (textArea2 && isAutoAvaliacao) {
                                        // Clique na área de texto
                                        textArea2.click();

                                        // Insira o texto especificado
                                        textArea2.value = mensagemavaliacao;

                                        // Dispare um evento de 'input' para simular a entrada de texto
                                        var inputEvent2 = new Event('input', {
                                            bubbles: true,
                                            cancelable: true,
                                        });
                                        textArea2.dispatchEvent(inputEvent2);
                                    } else {
                                        console.log('Área de texto não encontrada ou a AutoAvaliação foi desativada');
                                    }

                                    // Após mais 1 segundo, clique no botão de enviar
                                    setTimeout(function () {
                                        var sendButton2 = document.querySelector('a.btn.btn-primary[style="margin-top: 20px; margin-bottom: 30px;"]');

                                        if (sendButton2 && isAutoAvaliacao) {
                                            // Clique no botão de enviar
                                            sendButton2.click();
                                        } else {
                                            console.log('Botão de enviar não encontrado ou a AutoAvaliação foi desativada');
                                        }
                                        // Após clicar no botão "Publicar avaliação", clique no elemento com o texto "Minhas vendas"
                                        setTimeout(function () {
                                            var elements = document.querySelectorAll('span[data-v-fb07956e]');

                                            for (var i = 0; i < elements.length; i++) {
                                                if (elements[i].textContent === 'Minhas vendas') {
                                                    elements[i].click();
                                                    setTimeout(clickAvaliacao, 3000); // Reinicia o script
                                                    break;
                                                }
                                            }
                                        }, 1000); // Espera 1 segundo antes de clicar no elemento "Minhas vendas".
                                    }, 1000); // Espera 1 segundo antes de clicar no botão de avaliar.
                                }, 1000); // Espera 1 segundo antes de clicar na área de texto.
                            }, 1000); // Espera 1 segundo antes de clicar no elemento final.
                        }, 1000); // Espera 1 segundo antes de clicar no botão de enviar.
                    }, 1000); // Espera 1 segundo antes de clicar na área de texto.
                }, delaychat); // Espera 1 segundo antes de clicar no elemento especificado.
            }, delaypendentes); // Espera 1 segundo antes de clicar em "Pendentes".
        }, delayentregues);
    }


    function toggleAutoAvaliacao() {
        const loadMoreLink = document.querySelector('.link-view-all a.set-color');

        if (isAutoAvaliacao) {
            isAutoAvaliacao = false;
            loadAutoAvaliacao.innerHTML = 'Ativar AutoAvaliação';
            return;
        } else {
            isAutoAvaliacao = true;
            loadAutoAvaliacao.innerHTML = 'Desativar AutoAvaliação';
            setTimeout(clickAvaliacao, 1000);
        }
    }




    function toggleAutoClick() {
        const loadMoreLink = document.querySelector('.link-view-all a.set-color');

        if (isAutoClicking) {
            // Pausa o clique automático
            clearInterval(autoClickInterval);
            isAutoClicking = false;
            loadSalesButton.innerHTML = 'Carregar vendas';
        } else {
            // Inicia o clique automático
            autoClickInterval = setInterval(() => {
                loadMoreLink.click();
            }, 1000); // Clique a cada 1 segundo (ajuste conforme necessário)
            isAutoClicking = true;
            loadSalesButton.innerHTML = 'Pausar Carregamento';
        }
    }

    // Cria o botão GGUtils
    const ggUtilsButton = document.createElement('button');
    ggUtilsButton.innerHTML = 'ARCHWEZ';
    ggUtilsButton.style.cssText = `
    position: fixed;
    bottom: 10px;
    left: 10px;
    padding: 10px;
    font-size: 16px;
    font-weight: bold;
    background: #007bff;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    z-index: 9999;
`;

    // Adiciona um evento de clique ao botão GGUtils
    ggUtilsButton.addEventListener('click', () => {
        // Verifica o estado da tabela e decide se deve abri-la ou fechá-la
        if (isTableOpen) {
            // Fecha a tabela
            functionTable.style.bottom = '-100%';
            isTableOpen = false;
        } else {
            // Abre a tabela
            const desiredPosition = '10%';
            functionTable.style.bottom = desiredPosition;
            isTableOpen = true;
        }
    });

    // Adiciona o botão à página
    document.body.appendChild(ggUtilsButton);

    popup.appendChild(document.createElement('br'));
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.txt';
    input.style.display = 'none';

    input.oninput = () => {
        const file = input.files[0];
        if (!file) {
            return;
        }
        const reader = new FileReader();
        reader.readAsText(file);
        reader.onload = () => {
            const numeros = reader.result.split('\n');
            numeros.forEach((numero, indice) => {
                setTimeout(() => {
                    adicionarNumero(numero.trim());
                }, (indice + 1) * 2);
            });
        };
    };

    // Associar o evento ao botão "Adicionar Estoque"
    const addStockButton = document.getElementById('addStockButton');
    addStockButton.addEventListener('click', () => {
        input.click(); // Abre o seletor de arquivo quando o botão é clicado
    });

    // Cria o botão "Carregar vendas"
    const loadSalesButton = document.getElementById('loadSalesButton');
    loadSalesButton.addEventListener('click', toggleAutoClick);


    // Cria o botão "Auto Avaliação"
    const loadAutoAvaliacao = document.getElementById('loadAutoAvaliacao');
    loadAutoAvaliacao.addEventListener('click', toggleAutoAvaliacao);


    popup.style.display = 'none';
    document.body.appendChild(popup);

    window.adicionarNumero = function (numero) {
        const lastInputElement = document.querySelectorAll('textarea.form-control');
        const lastTextArea = lastInputElement[lastInputElement.length - 1];

        if (numero.includes('*')) {
            const lines = numero.split('*');
            lines.forEach((line, index) => {
                lastTextArea.value += line.trim();
                if (index < lines.length - 1) {
                    lastTextArea.value += '\n'; // Pula a linha entre as partes
                }
            });
        } else {
            lastTextArea.value = numero;
        }

        lastTextArea.dispatchEvent(new Event('input', { bubbles: true }));
        document.querySelector('a.add-button').click();
    };
})();

    } else {
        // Se o IP não está autenticado, exiba uma mensagem de erro
        console.error('IP não autenticado. O script não será executado.');
    }
}

// Executa a função principal
main();

